pipeline {
    
	agent any
/*	
	tools {
        maven "maven3"
    }
*/	
    environment {
        
        
        //NEXUS_URL = "172.31.40.209:8081"
        //NEXUS_REPOSITORY = "vprofile-release"
	    //NEXUS_REPOGRP_ID    = "webapp-grp-repo"
        NEXUS_CREDENTIAL_ID = "nexuslogin"
        ARTVERSION = "${env.BUILD_ID}"
        //
        SNAP_REPO = 'webapp-snapshot'
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'admin'
        RELEASE_REPO = 'webapp-release'
        CENTRAL_REPO =  'webapp-maven-central'
        NEXUSIP = '172.31.39.126'
        NEXUSPORT = '8081'
        NEXUS_GRP_REPO = 'webapp-maven-group'
        NEXUS_LOGIN = "nexuslogin"
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        registryCredential = 'ecr:ap-south-a:awscreds'
        appRegistry = '321503580090.dkr.ecr.ap-south-1.amazonaws.com/webappecr'
        vprofileRegistry ='https://321503580090.dkr.ecr.ap-south-1.amazonaws.com'
        //NEXUS_URL = "3.110.128.159"
        //NEXUS_PORT = "8081"
        NEXUS_REPOSITORY = "webapp-release"
        //NEXUS_REPOGRP_ID    = 
        //NEXUS_CREDENTIAL_ID = "nexus-login"
        //ARTVERSION = "${env.BUILD_ID} ${env.BUILD_TIMESTAMP}"
    }
	 
    stages{
        
        stage('BUILD'){
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

	stage('UNIT TEST'){
            steps {
                sh 'mvn test'
            }
        }

	stage('INTEGRATION TEST'){
            steps {
                sh 'mvn verify -DskipUnitTests'
            }
        }
		
        stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

        stage('CODE ANALYSIS with SONARQUBE') {
          
		  environment {
             scannerHome = tool 'sonarscanner'
          }

          steps {
            withSonarQubeEnv('sonarserver') {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }

            timeout(time: 10, unit: 'MINUTES') {
               waitForQualityGate abortPipeline: true
            }
          }
        }

        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version} ARTVERSION";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                            groupId: 'QA',
                            version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                            repository: "${NEXUS_REPOSITORY}",
                            credentialsId: "${NEXUS_LOGIN}",
                            artifacts: [
                            [artifactId: 'webapp',
                            classifier: '',
                            file: 'target/webapp-v2.war',
                            type: 'war']
                          ]
                        )
                    }         
                }
            }      
        }
        stage('Build App Image'){
            steps {
                script{
                        dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/" )
                }
            }
        }
        stage('Upload App Image'){
            steps {
                script{
                    docker.withRegistry( vprofileRegistry, registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
}
